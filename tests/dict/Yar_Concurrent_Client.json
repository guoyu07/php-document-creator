{
  "properties": {
    "_callstack": {
      "comment": "调用栈状态"
    },
    "_callback": {
      "comment": "调用回调函数"
    },
    "_error_callback": {
      "comment": "错误回调函数名"
    },
    "_start": {
      "comment": "是否已经开始"
    }
  },
  "methods": {
    "call": {
      "comment": "注册一个并行的服务调用",
      "parameters": {
        "uri": {
          "comment": "RPC 服务的 URI(http 或 tcp)",
          "type": "string",
          "options": [
          ],
          "extra": ""
        },
        "method": {
          "comment": "string",
          "type": "调用的服务名字(也就是服务方法名)",
          "options": [],
          "extra": ""
        },
        "parameters": {
          "comment": "调用的参数",
          "type": "array",
          "options": [
          ],
          "extra": ""
        },
        "callback": {
          "comment": "回调函数, 在远程服务的返回到达的时候被Yar调用, 从而可以处理返回内容",
          "type": "callable",
          "options": [

          ],
          "extra": ""
        }
      },
      "example": "     *function callback($retval, $callinfo)\n     * {\n     *}\n     * Yar_Concurrent_Client::call('http://host/api/', 'some_method', array('parameters'), 'callback');",
      "return": ""
    },
    "loop": {
      "comment": "发送所有注册的并行调用",
      "parameters": {
        "callback": {
          "comment": "如果这个回掉函数被设置, 那么Yar在发送出所有的请求之后立即调用一次这个回掉函数(此时还没有任何请求返回), 调用的时候$callinfo参数是NULL.如果在注册并行调用的时候制定了callback, 那么那个callback有更高的优先级",
          "type": "callable",
          "options": [

          ],
          "extra": ""
        },
        "error_callback": {
          "comment": "错误回掉函数, 如果设置了, 那么Yar在出错的时候会调用这个回掉函数",
          "type": "callable",
          "options": [

          ],
          "extra": ""
        }
      },
      "example": "     * function callback($retval, $callinfo)\n     *{\n     *}\n\n     *function error_callback($type, $error, $callinfo) \n     *{\n     *error_log($error);\n     *}",
      "return": ""
    },
    "reset": {
      "comment": "清除所有的服务调用",
      "parameters": [],
      "example": "",
      "return": ""
    }
  }
}