{
  "object": {
    "name": "Swoole\\Lock"
  },
  "comment": "swoole 锁",
  "namespace": "Swoole",
  "consts": [],
  "properties": [],
  "methods": {
    "__construct": {
      "access": "public",
      "comment": "初始化锁",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": {
        "type": {
          "comment": "锁的类型",
          "type": "int",
          "options": []
        },
        "filename": {
          "comment": "锁文件",
          "type": "string",
          "options": []
        }
      }
    },
    "__destruct": {
      "access": "public",
      "comment": "析构函数",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "lock": {
      "access": "public",
      "comment": "加锁操作",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "trylock": {
      "access": "public",
      "comment": "加锁操作。与lock方法不同的是，trylock()不会阻塞，它会立即返回。当返回false时表示抢锁失败，有其他进程持有锁。返回true时表示加锁成功，此时可以修改共享变量。",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "lock_read": {
      "access": "public",
      "comment": "加锁。lock_read方法仅可用在读写锁(SWOOLE_RWLOCK)和文件锁(SWOOLE_FILELOCK)中，表示仅仅锁定读。在持有读锁的过程中，其他进程依然可以获得读锁，可以继续发生读操作。但不能$lock->lock()或$lock->trylock()，这两个方法是获取独占锁的",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "trylock_read": {
      "access": "public",
      "comment": "加锁。此方法与lock_read相同，但是非阻塞的。调用会立即返回，必须检测返回值以确定是否拿到了锁",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    },
    "unlock": {
      "access": "public",
      "comment": "释放锁",
      "isStatic": false,
      "return": "",
      "example": "",
      "parameters": []
    }
  }
}